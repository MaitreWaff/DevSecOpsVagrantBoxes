global
	description HaProxy01 - HaProxy LoadBalancer 1/2
	#log /dev/log	local0
	#log /dev/log	local1 notice
	log /dev/log	local5 debug
	chroot /var/lib/haproxy
	#stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
	stats socket /run/haproxy/admin.sock mode 660 level admin
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	# See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
	log	global
	mode	http
	option	httplog
	option	dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http

listen stats
	bind *:9000
	stats enable
	stats uri /stats
	stats refresh 2s
	stats auth haadmin:password
	stats show-desc
	stats show-legends
	stats admin if TRUE

frontend myapp_front
	description FrontEnd de loadbalancer1.fr et loadbalancer2.fr
	bind *:80
	mode http
	#default_backend myapp_back

	acl myapp_front1 hdr_dom(host) -i loadbalancer1.fr
	use_backend load1 if myapp_front1

	acl myapp_front2 hdr_dom(host) -i loadbalancer2.fr
	use_backend load2 if myapp_front2

	option forwardfor
	default_backend load

backend load
	description Application mantisBT on app01:5000 aka MantisBT
	server serv1 app01:5000

#backend myapp_back
#	balance roundrobin
#	server srv_nginx app01:80
#	server srv_apache2 app02:80

backend load1
	description Application WordPress on app01:80 aka WordPress
	server srv_load1 app01:80

backend load2
	description load Application on app01:5000 aka FlaskApp
	description Application LoadBalancing FlaskApp on app01:80, app01:5000, app02:5000 aka FlaskApp
	server srv1_load2 app01:5000
	server srv2_load2 app02:5000
	server srv3_load2 app01:80
