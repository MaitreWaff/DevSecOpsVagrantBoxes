# -*- mode: ruby -*-
# vi: set ft=ruby :
ENV["LC_ALL"] = "en_US.UTF-8"
Vagrant.configure("2") do |config|
  config.hostmanager.enabled = true
  config.hostmanager.manage_host = true
  #config.vm.synced_folder "../scripts", "/scripts"
  config.vm.synced_folder "./scripts", "/scripts"
  # config.vm.provision "shell", inline:  "/vagrant/scripts/defaultScript.sh"
  # config.vm.provision "shell", inline:  "/scripts/defaultScript.sh"
  config.vm.provision "shell", inline: <<-SHELL
    # apt update
    useradd -c "HaProxy Admin User" -s /bin/bash -m admin01
    usermod -aG sudo admin01
    usermod -aG vagrant admin01
    chage -l admin01
    echo "admin01:password" | chpasswd
    chage -l admin01
    mkdir -p /home/admin01/.ssh
    touch /home/admin01/.ssh/authorized_keys
    chmod 700 /home/admin01/.ssh
    chmod 600 /home/admin01/.ssh/authorized_keys
    chown -R admin01:admin01 /home/admin01/.ssh
    apt update -y
    # apt upgrade -y
  SHELL

  # config.vm.box = "generic/ubuntu2204"

  ### haproxy01 VM ###
  config.vm.define "haproxy01", primary: true do |haproxy01|
    haproxy01.vm.box = "generic/ubuntu2204"
    haproxy01.vm.box_version = "4.3.2"
    # haproxy01.vm.box = "geerlingguy/centos7"
    haproxy01.vm.hostname = "haproxy01"
    # haproxy01.vm.network "private_network", ip: "192.168.75.11"
    haproxy01.vm.network "public_network", bridge: "en0: Wi-Fi", ip: "192.168.1.111"
    haproxy01.vm.network "private_network", ip: "192.168.75.11"
    haproxy01.vm.network "forwarded_port",  guest: 80, host: 81, protocol: "tcp"
    haproxy01.vm.network "forwarded_port",  guest: 8000, host: 8001, protocol: "tcp"
    # haproxy01.vm.synced_folder "./scripts", "/scripts"
    # haproxy01.vm.synced_folder "./sshKeys/haproxy01/.ssh/", "/home/admin01/.ssh/"
    haproxy01.vm.boot_timeout = 1800
    haproxy01.vm.provider "virtualbox" do |vb|
      vb.name = "haproxy01"
      vb.memory = "1024"
      # vb.memory = "2048"
    end
    # haproxy01.vm.provision "shell", inline: "/scripts/installhaproxy01.sh"
    haproxy01.vm.provision "shell", inline: <<-SHELL
      hostname
      apt-get install -y haproxy
      systemctl enable haproxy
      systemctl restart haproxy
      sudo cp /scripts/sshKeys/haproxy01/.ssh/haproxy01_rsa /home/admin01/.ssh/
      sudo cp /scripts/sshKeys/haproxy01/.ssh/haproxy01_rsa.pub /home/admin01/.ssh/
      chown admin01:admin01 /home/admin01/.ssh/haproxy01_rsa*
    SHELL
  end

  ### haproxy02 VM ###
  config.vm.define "haproxy02", primary: true do |haproxy02|
    haproxy02.vm.box = "generic/ubuntu2204"
    haproxy02.vm.box_version = "4.3.2"
    # haproxy02.vm.box = "geerlingguy/centos7"
    haproxy02.vm.hostname = "haproxy02"
    # haproxy02.vm.network "private_network", ip: "192.168.75.12"
    haproxy02.vm.network "public_network", bridge: "en0: Wi-Fi", ip: "192.168.1.112"
    haproxy02.vm.network "private_network", ip: "192.168.75.12"
    haproxy02.vm.network "forwarded_port",  guest: 80, host: 82, protocol: "tcp"
    haproxy02.vm.network "forwarded_port",  guest: 8000, host: 8002, protocol: "tcp"
    haproxy02.vm.boot_timeout = 1800
    haproxy02.vm.provider "virtualbox" do |vb|
      vb.name = "haproxy02"
      vb.memory = "1024"
      # vb.memory = "2048"
    end
    # haproxy02.vm.provision "shell", inline: "/scripts/installhaproxy02.sh"
    haproxy02.vm.provision "shell", inline: <<-SHELL
      hostname
      apt-get install -y haproxy
      systemctl enable haproxy
      systemctl restart haproxy
      sudo cp /scripts/sshKeys/haproxy02/.ssh/haproxy02_rsa /home/admin01/.ssh/
      sudo cp /scripts/sshKeys/haproxy02/.ssh/haproxy02_rsa.pub /home/admin01/.ssh/
      chown admin01:admin01 /home/admin01/.ssh/haproxy02_rsa*
    SHELL
  end

  ### app01 VM ###
  config.vm.define "app01" do |app01|
    app01.vm.box = "generic/ubuntu2204"
    app01.vm.box_version = "4.3.2"
    # app01.vm.box = "geerlingguy/centos7"
    app01.vm.hostname = "app01"
    # app01.vm.network "private_network", ip: "192.168.75.13"
    app01.vm.network "public_network", bridge: "en0: Wi-Fi", ip: "192.168.1.113"
    app01.vm.network "private_network", ip: "192.168.75.13"
    app01.vm.network "forwarded_port",  guest: 80, host: 83, protocol: "tcp"
    app01.vm.network "forwarded_port",  guest: 8000, host: 8003, protocol: "tcp"
    app01.vm.boot_timeout = 1800
    app01.vm.provider "virtualbox" do |vb|
      vb.name = "app01"
      vb.memory = "1024"
    end
    app01.vm.provision "shell", inline: <<-SHELL
      hostname
      sudo cp /scripts/sshKeys/app01/.ssh/app01_rsa /home/admin01/.ssh/
      sudo cp /scripts/sshKeys/app01/.ssh/app01_rsa.pub /home/admin01/.ssh/
      chown admin01:admin01 /home/admin01/.ssh/app01_rsa*
      apt-get install -y nginx
      systemctl enable nginx
      systemctl restart nginx
    SHELL
    app01.vm.provision "shell", inline: "/scripts/defaultScript.sh"
    app01.vm.provision "shell", inline: "/scripts/install-docker.sh"
    app01.vm.provision "shell", inline: "/scripts/install-dockerCompose.sh"
  end

  ### app02 VM ###
  config.vm.define "app02" do |app02|
    app02.vm.box = "generic/ubuntu2204"
    app02.vm.box_version = "4.3.2"
    # app02.vm.box = "geerlingguy/centos7"
    app02.vm.hostname = "app02"
    # app02.vm.network "private_network", ip: "192.168.75.14"
    app02.vm.network "public_network", bridge: "en0: Wi-Fi", ip: "192.168.1.114"
    app02.vm.network "private_network", ip: "192.168.75.14"
    app02.vm.network "forwarded_port",  guest: 80, host: 84, protocol: "tcp"
    app02.vm.network "forwarded_port",  guest: 8000, host: 8004, protocol: "tcp"
    app02.vm.boot_timeout = 1800
    app02.vm.provider "virtualbox" do |vb|
      vb.name = "app02"
      vb.memory = "1024"
    end
    app02.vm.provision "shell", inline: <<-SHELL
      hostname
      sudo cp /scripts/sshKeys/app02/.ssh/app02_rsa /home/admin01/.ssh/
      sudo cp /scripts/sshKeys/app02/.ssh/app02_rsa.pub /home/admin01/.ssh/
      chown admin01:admin01 /home/admin01/.ssh/app01_rsa*
      apt-get install -y apache2
      systemctl enable apache2
      systemctl restart apache2
    SHELL
    app02.vm.provision "shell", inline: "/scripts/defaultScript.sh"
    app02.vm.provision "shell", inline: "/scripts/install-docker.sh"
    app02.vm.provision "shell", inline: "/scripts/install-dockerCompose.sh"
  end

end
